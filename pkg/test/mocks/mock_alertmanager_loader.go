// Code generated by MockGen. DO NOT EDIT.
// Source: loader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/prometheus/alertmanager/api/v2/models"
)

// MockAlertManagerLoader is a mock of Loader interface.
type MockAlertManagerLoader struct {
	ctrl     *gomock.Controller
	recorder *MockAlertManagerLoaderMockRecorder
}

// MockAlertManagerLoaderMockRecorder is the mock recorder for MockAlertManagerLoader.
type MockAlertManagerLoaderMockRecorder struct {
	mock *MockAlertManagerLoader
}

// NewMockAlertManagerLoader creates a new mock instance.
func NewMockAlertManagerLoader(ctrl *gomock.Controller) *MockAlertManagerLoader {
	mock := &MockAlertManagerLoader{ctrl: ctrl}
	mock.recorder = &MockAlertManagerLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertManagerLoader) EXPECT() *MockAlertManagerLoaderMockRecorder {
	return m.recorder
}

// ActiveAlerts mocks base method.
func (m *MockAlertManagerLoader) ActiveAlerts() ([]models.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveAlerts")
	ret0, _ := ret[0].([]models.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveAlerts indicates an expected call of ActiveAlerts.
func (mr *MockAlertManagerLoaderMockRecorder) ActiveAlerts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveAlerts", reflect.TypeOf((*MockAlertManagerLoader)(nil).ActiveAlerts))
}

// ActiveAlertsWithLabels mocks base method.
func (m *MockAlertManagerLoader) ActiveAlertsWithLabels(labels []string) ([]models.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveAlertsWithLabels", labels)
	ret0, _ := ret[0].([]models.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveAlertsWithLabels indicates an expected call of ActiveAlertsWithLabels.
func (mr *MockAlertManagerLoaderMockRecorder) ActiveAlertsWithLabels(labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveAlertsWithLabels", reflect.TypeOf((*MockAlertManagerLoader)(nil).ActiveAlertsWithLabels), labels)
}

// SilencedAlerts mocks base method.
func (m *MockAlertManagerLoader) SilencedAlerts() ([]models.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SilencedAlerts")
	ret0, _ := ret[0].([]models.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SilencedAlerts indicates an expected call of SilencedAlerts.
func (mr *MockAlertManagerLoaderMockRecorder) SilencedAlerts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SilencedAlerts", reflect.TypeOf((*MockAlertManagerLoader)(nil).SilencedAlerts))
}
