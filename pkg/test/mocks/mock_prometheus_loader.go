// Code generated by MockGen. DO NOT EDIT.
// Source: loader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	prom "github.com/openshift/cluster-health-analyzer/pkg/prom"
	model "github.com/prometheus/common/model"
)

// MockPrometheusLoader is a mock of Loader interface.
type MockPrometheusLoader struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusLoaderMockRecorder
}

// MockPrometheusLoaderMockRecorder is the mock recorder for MockPrometheusLoader.
type MockPrometheusLoaderMockRecorder struct {
	mock *MockPrometheusLoader
}

// NewMockPrometheusLoader creates a new mock instance.
func NewMockPrometheusLoader(ctrl *gomock.Controller) *MockPrometheusLoader {
	mock := &MockPrometheusLoader{ctrl: ctrl}
	mock.recorder = &MockPrometheusLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusLoader) EXPECT() *MockPrometheusLoaderMockRecorder {
	return m.recorder
}

// LoadAlerts mocks base method.
func (m *MockPrometheusLoader) LoadAlerts(ctx context.Context, t time.Time) ([]model.LabelSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAlerts", ctx, t)
	ret0, _ := ret[0].([]model.LabelSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAlerts indicates an expected call of LoadAlerts.
func (mr *MockPrometheusLoaderMockRecorder) LoadAlerts(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAlerts", reflect.TypeOf((*MockPrometheusLoader)(nil).LoadAlerts), ctx, t)
}

// LoadAlertsRange mocks base method.
func (m *MockPrometheusLoader) LoadAlertsRange(ctx context.Context, start, end time.Time, step time.Duration) (prom.RangeVector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAlertsRange", ctx, start, end, step)
	ret0, _ := ret[0].(prom.RangeVector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAlertsRange indicates an expected call of LoadAlertsRange.
func (mr *MockPrometheusLoaderMockRecorder) LoadAlertsRange(ctx, start, end, step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAlertsRange", reflect.TypeOf((*MockPrometheusLoader)(nil).LoadAlertsRange), ctx, start, end, step)
}

// LoadVectorRange mocks base method.
func (m *MockPrometheusLoader) LoadVectorRange(ctx context.Context, query string, start, end time.Time, step time.Duration) (prom.RangeVector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadVectorRange", ctx, query, start, end, step)
	ret0, _ := ret[0].(prom.RangeVector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadVectorRange indicates an expected call of LoadVectorRange.
func (mr *MockPrometheusLoaderMockRecorder) LoadVectorRange(ctx, query, start, end, step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadVectorRange", reflect.TypeOf((*MockPrometheusLoader)(nil).LoadVectorRange), ctx, query, start, end, step)
}
